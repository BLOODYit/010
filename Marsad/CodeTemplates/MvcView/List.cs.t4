<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model PagedList.IPagedList<#= "<" + ViewDataTypeName + ">" #>
@using PagedList.Mvc;
@using Marsad.Helpers;

<#
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.
if(IsPartialView) {
#>

<#
} else if(IsLayoutPageSelected) {
#>

@{
    ViewBag.Title = "<#= ViewName#>";
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}
<div class="container">
    <div class="row">
        <div class="col-xs-12">
<h1><#= ViewName#></h1>
<hr />

<#
} else {}
#>
			<div class="col-sm-2">
                @Html.ActionLink("إنشاء جديد", "Create", null, new { @class = "btn btn-success" })
            </div>
            <div class="col-sm-8">
                <form action="@Url.Action("Index")">
                    <div class="input-group">
                        <input class="form-control" name="searchString" value="@ViewBag.CurrentFilter" placeholder="بحث" />
                        <span class="input-group-btn">
                            <input type="submit" value="بحث" class="btn btn-primary" />
                        </span>
                    </div>                   
                </form>
            </div>
<table class="table table-striped jambo_table">
	<thead>
    <tr>
<#
IEnumerable<PropertyMetadata> properties = ModelMetadata.Properties;
foreach (PropertyMetadata property in properties) {
    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
#>
<#
        // We do not want to show any association properties for which there is
        // no associated foreign key.
        if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
            continue;
        }
#>
        <th>
			<a href="@Url.Action("Index",new { sortOrder=ViewBag.<#= GetValueExpression(property) #>SortParm,currentFilter=ViewBag.CurrentFilter})">
				<i class="@Html.GetSortingClass((string)ViewBag.CurrentSort,"<#= GetValueExpression(property) #>")"></i> @Html.DisplayNameFor(model => model.FirstOrDefault().<#= GetValueExpression(property) #>)
			</a>            
        </th>
<#
    }
}
#>
        <th width="250"></th>
    </tr>
	</thead>
	<tbody>
@foreach (var item in Model) {
    <tr>
<#
foreach (PropertyMetadata property in properties) {
    if (property.Scaffold && !property.IsPrimaryKey && !property.IsForeignKey) {
#>
<#
        // We do not want to show any association properties for which there is
        // no associated foreign key.
        if (property.IsAssociation && GetRelatedModelMetadata(property) == null) {
            continue;
        }
#>
        <td>
            @Html.DisplayFor(modelItem => <#= "item." + GetValueExpression(property) #>)
        </td>
<#
    }
}

string pkName = GetPrimaryKeyName();
if (pkName != null) {
#>
        <td>
            @Html.ActionLink("تعديل", "Edit", new { id=item.<#= pkName #> },new {@class="btn btn-primary"})
            @Html.ActionLink("بيانات", "Details", new { id=item.<#= pkName #> },new {@class="btn btn-default"})
            @Html.ActionLink("حذف", "Delete", new { id=item.<#= pkName #> },new {@class="btn btn-danger"})
        </td>
<#
} else {
#>
        <td>
            @Html.ActionLink("تعديل", "Edit", new { /* id=item.PrimaryKey */ },new {@class="btn btn-primary"})
            @Html.ActionLink("بيانات", "Details", new { /* id=item.PrimaryKey */ },new {@class="btn btn-default"})
            @Html.ActionLink("حذف", "Delete", new { /* id=item.PrimaryKey */ },new {@class="btn btn-danger"})
        </td>
<#
}
#>
    </tr>
}
</tbody>
</table>
<#
// The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
#>

 <div class="col-md-2">صفحة @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) / @Model.PageCount</div>
   @if (Model.PageCount > 1)
            {
                <div class="col-md-8">
                    @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
                </div>
            }           

     </div>
    </div>
</div>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>