@model List<Marsad.Models.OfficerLog>

@{
    ViewBag.Title = "مدخلات ضباط الإتصال";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container">
    <div class="row">
        <div class="col-xs-12">
            <h1>مدخلات ضباط الإتصال</h1>
            <hr />
            <div class="col-sm-8 offset-sm-2">
                <form action="@Url.Action("PendingLog")">
                    <div class="input-group">
                        <input class="form-control" name="searchString" value="@ViewBag.CurrentFilter" placeholder="بحث" />
                        <span class="input-group-btn">
                            <input type="submit" value="بحث" class="btn btn-primary" />
                        </span>
                    </div>
                </form>
            </div>
            <div class="col-sm-2 col-xs-12">
                <button class="btn btn-success" id="export">تصدير</button>
            </div>
            <table class="table table-striped jambo_table" id="html-table" dir="rtl" style="direction:rtl;">
                <thead>
                    <tr>
                        <th>الجهة</th>
                        <th>تاريخ العملية</th>
                        <th>القيم المحدثة</th>
                        <th>السنة</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.EntityName</td>
                            <td>@item.ActionDate.ToString()</td>
                            <td>@item.Notes</td>
                            <td>@item.Year</td>
                        </tr>
                    }
                </tbody>
            </table>           
        </div>
    </div>
</div>


@section  scripts{
    <script type="text/javascript">
        $(function () {
            $('#export').click(function () {
                var pdf = new jsPDF();
                pdf.setFont('Amiri');
                pdf.text('تقرير مدخلات ضباط الإتصال', (pdf.internal.pageSize.width / 2), 12, 'center');
                var rtlTable = $('#html-table').clone();
                rtlTable.find('tr').each(function () {
                    var tds = $(this).children('td,th').get().reverse();
                    $(this).append(tds);
                });                
                pdf.autoTable({
                    html: rtlTable.get()[0], startY: 20, styles: { halign: "left", font: "Amiri" },
                    didParseCell({ doc, cell, column }) {                        
                        if (cell === undefined) {
                            return;
                        }
                        const hasCustomWidth = (typeof cell.styles.cellWidth === 'number');
                        if (hasCustomWidth || cell.raw == null || cell.colSpan > 1) {
                            return
                        }
                        let text;
                        if (cell.raw instanceof Node) {
                            text = cell.raw.innerText;
                        } else {
                            if (typeof cell.raw == 'object') {
                                return;
                            } else {
                                text = '' + cell.raw;
                            }
                        }
                        // split cell string by spaces
                        const words = text.split(/\s+/);
                        // calculate longest word width
                        const maxWordUnitWidth = words.map(s => Math.floor(doc.getStringUnitWidth(s) * 100) / 100).reduce((a, b) => Math.max(a, b), 0);
                        const maxWordWidth = maxWordUnitWidth * (cell.styles.fontSize / doc.internal.scaleFactor)
                        const minWidth = cell.padding('horizontal') + maxWordWidth;

                        // update minWidth for cell & column

                        if (minWidth > cell.minWidth) {
                            cell.minWidth = minWidth;
                        }

                        if (cell.minWidth > cell.wrappedWidth) {
                            cell.wrappedWidth = cell.minWidth;
                        }

                        if (cell.minWidth > column.minWidth) {
                            column.minWidth = cell.minWidth;
                        }

                        if (column.minWidth > column.wrappedWidth) {
                            column.wrappedWidth = column.minWidth;
                        }
                    }
                });
                pdf.save("reprt.pdf");
            });
        });
    </script>
}